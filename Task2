import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, confusion_matrix
from sklearn.preprocessing import LabelEncoder

def load_data(file_path):
    data = pd.read_csv(file_path)
    return data

def preprocess_data(data):
    non_numeric_cols = data.select_dtypes(include=['object']).columns
    label_encoders = {}
    for col in non_numeric_cols:
        le = LabelEncoder()
        data[col] = le.fit_transform(data[col])
        label_encoders[col] = le
    X = data.drop("target", axis=1)  # Assuming 'target' is your label column
    y = data["target"]
    return X, y, label_encoders

def train_model(X, y, model, hyperparameters):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    grid_search = GridSearchCV(model, hyperparameters, cv=5, scoring='f1_macro')
    grid_search.fit(X_train, y_train)
    return grid_search, X_test, y_test

def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    auc = roc_auc_score(y_test, model.predict_proba(X_test)[:, 1])
    conf_matrix = confusion_matrix(y_test, y_pred)
    return accuracy, precision, recall, f1, auc, conf_matrix

def main():
    file_path = "RawData.csv"  # Make sure this file exists in your directory
    data = load_data(file_path)
    X, y, label_encoders = preprocess_data(data)

    # Define models and their hyperparameters
    models = {
        'LogisticRegression': (LogisticRegression(), {'C': [0.1, 1.0, 10]}),
        'RandomForestClassifier': (RandomForestClassifier(), {'n_estimators': [10, 50, 100]}),
        'SVC': (SVC(probability=True), {'C': [0.1, 1.0, 10], 'kernel': ['linear', 'rbf']})
    }

    # Train and evaluate each model
    for model_name, (model, hyperparameters) in models.items():
        print(f"Training {model_name}...")
        grid_search, X_test, y_test = train_model(X, y, model, hyperparameters)
        accuracy, precision, recall, f1, auc, conf_matrix = evaluate_model(grid_search.best_estimator_, X_test, y_test)
        
        print(f"\n{model_name} Results:")
        print(f"Best Parameters: {grid_search.best_params_}")
        print(f"Accuracy: {accuracy:.4f}")
        print(f"Precision: {precision:.4f}")
        print(f"Recall: {recall:.4f}")
        print(f"F1 Score: {f1:.4f}")
        print(f"AUC: {auc:.4f}")
        print(f"Confusion Matrix:\n{conf_matrix}\n")

if __name__ == "__main__":
    main()
